# -*- coding: utf-8 -*-
"""skilldevelopment-3(Python)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xM5MaqYqwM4bu1DYmO_9hEQeC3hPuZzJ
"""

'''To take space-separated integers from user input:
1. Use the input() function to take multiple, space-separated integers.
2. Use the str. split() function to split the string into a list.
3. Use the int() class to convert each string in the list to an integer.'''

num=input()
print(int(num,17))

#write a program to convert Faranheit to Celsius
fa=float(input("Enter a value in Faranheit"))
ce=(0.58)*(fa-32)
print(ce)

#given number is positive or not
n=int(input("Enter a number"))
if n>0:
  print(n,"is positive")
else:
  print(n,"is negative")

#a program to find a text present in a sentence or not
t=input("Enter a sentence:")
a="good"
if (a in t):
  print(a,"is in",t)

#a program to separate a character from text
a="MISSISSIPPI"
print(a.split("S"))
print(a.upper())
print(a)

def ls(string):#find the length of string
  c=0
  for i in string:# while string[c:]:
    c=c+1
  return c
print(ls("abc"))
len("abc")

#string formatiing
name="abhi"
country="argentina"
print(f'{name} is born in {country}')

#sets
s1={1,2,3}
s2={2.0,(1,2,3),"abc"}
print(s1)
print(s2)

x={}
print(type(x))
y=set()
print(type(y))

#modifying a set
s={1,3}
s.add(2)
print(s)
s.update([2,3,4])
print(s)
s.update([4,5],{1,6,7})
print(s)

n=int(input("Enter total Candies:"))
k=int(input("Enter number of candies to be sold:"))
if(k==0):
  print("INVALID INPUT")
  print("No. of Candies available:",n-k)
elif(k<=5):
  print("No. of Candies sold:",k)
  print("No. of Candies available:",n-k)
  print("No. of Candies after filling:",(n-k+k))
else:
  print("INVALID INPUT")
  print("No. of Candies available:",n-k)

size=int(input())
max=0
count=0
str=input()
arr=list(str)
for i in range(0,size):
  if(arr[i]=='1'):
    count=count+1
    flag=1
  elif(arr[i]=='0' and flag==1):
    count=0
    flag=0
  if(count>max):
    max=count
print(max)

#looping statements
#while loop
i=0
while(i<=10):
  print(i,end=" ")
  i+=1

#looping statements
#while loop
i=0
while(i<=10):
  print(i,end="\t")
  i+=1

#write a proram to add elements between a range of (m,n)
m=int(input())
n=int(input())
s=0
while(m<=n):
  s=s+m
  m=m+1
print(s)

#program to find the sum of digits in a number
n=int(input())
r=0
s=0
while(n!=0):
  r=n%10
  s=s+r
  n=n//10
print(s)

#Niven's (or) Harshed Number
n=int(input("Enter a number:"))
r=0
s=0
temp=n
while(n!=0):
  r=n%10
  s=s+r
  n=n//10
print("The Sum of digits:",s)
if(temp%s==0):
  print(temp,"is a Niven's Number")
else:
  print(temp,"is not a Niven's Number")

n=int(input("Enter a number:"))
r=0
while(n!=0):
  r=n%10
  print(r,end=" ")
  n=n//10

num=int(input())
n_str=str(num)
r_num="".join(reversed(n_str))
print("Reversed Number:",r_num)

def reverse(n):
  if(len(n)==0):
    return n
  return reverse(n[1:])+n[0]
num=1234
n_str=str(num)
r_num=reverse(n_str)
print(r_num)

i=0
sum=0
for i in range(1,11):
  sum=sum+i
print("sum=",sum,"and avg=",(sum/10))

n=int(input("Enter a number:"))
for i in range(1,11):
  print(n,"*",i,"=",n*i)

for i in range(1900,2101):
  if(i%4==0):
    print(i,end=" ")

n=int(input("Enter a number:"))
sum=0.0
for i in range(1,n+1):
  print(1/i)
  sum=sum+(1/i)
print("Sum of Series:",sum)

n=int(input("Enter a number:"))
sum=0.0
for i in range(1,n+1):
  print(1/(i*i))
  sum=sum+(1/(i*i))
print("Sum of Series:",sum)

str1="ABCDEFGH"
str2="ate"
for letter in str1:
  print(letter+str2,end=" ")

#Patterns
#Right angled Triangle
n=int(input("Enter number of rows:"))
for i in range(n):
  for j in range(i+1):
    print("* ",end=" ")
  print("\n")

n=int(input("Enter number of rows:"))
for i in range(n):
  for j in range(i+1):
    print(j,end=" ")
  print("\n")

n=int(input("Enter number of rows:"))
for i in range(n):
  for j in range(i+1):
    print(j+1,end=" ")
  print("\n")

word=input("Enter a word:")
x=""
for i in word:
  x=x+i
  print(x,end=" ")

word=input("Enter a word:")
x=""
for i in word:
  x=x+i
  print(x)

n=int(input("Enter number of rows:"))
for i in range(n,0,-1):
  for j in range(0,i):
    print("& ",end=" ")
  print("\n")

n=int(input("Enter number of rows:"))
for i in range(n,0,-1):
  for j in range(0,i):
    print(j,end=" ")
  print("\n")

n=int(input("Enter number of rows:"))
for i in range(n,0,-1):
  for j in range(0,i):
    print(j+1,end=" ")
  print("\n")

m=int(input("Enter number of rows:"))
for i in range(1,m+1):
  for j in range(1,m+1):
    if(j<i):
      print(" ",end=" ")
    else:
      print(j,end=" ")
  print()

rows=int(input("Enter number of rows:"))
i=1
while(i<=rows):
  j=1
  while(j<=rows):
    if(j<i):
      print(" ",end=" ")
    else:
      print(j,end=" ")
    j=j+1
  i=i+1
  print()

m=int(input("Enter the number of rows:"))
for i in range(m,0,-1):
  for j in range(0,i):
    print("* ",end=" ")
  print("\n")

rows=int(input("Enter rows:"))
i=1
while(i<=rows):
  j=1
  while(j<=rows):
    if(j<i):
      print(" ",end=" ")
    else:
      print("*",end=" ")
    j=j+1
  i=i+1
  print()

a=65
r=7
for i in range(0,r):
  for j in range(0,i+1):
    ch=chr(a)
    print(ch,end=" ")
    a+=1
  print(" ")

#write a program to print patterns of 10 lines
#Evaluating vertically in a right angled triangle

#diamond or rhombus pattern
'''rows=int(input("enter number of rows:"))
i=1
while(i<=rows):
  j=rows
  while(j<i):
    print(' ',end=" ")
    j-=1
  print('*',end=" ")
  k=1
  while(k=2*(i-1)):
    print(' ',end=" ")
    k+=1
    if(i==1):
      print()
    else:
      print('*')
    i+=1
i=rows-1
while(i>=1):'''

#function syntax
'''def function_name(arg1,arg2,arg3,....,argn):
    ---------------------
    ---------------------
    return'''
def diff(a,b):
  return a-b
x=10
y=3
op=diff(x,y)
print(op)

m=int(input("Enter a number:"))
n=int(input("Enter a number:"))
count=0
if(abs(m-n)>0):
  while(m<=n):
    for i in range(1,m+1):
      if(m%i==0):
        count=count+1
    if(count==2):
      print(m)
    m=m+1
    count=0

def abc():
  global var1
  var1=" goodmorning"
  print("in the function var1 is - ",var1)
abc()
print("outside function is var2 - ",var1)
var1=" verygood"
print("outside function after modify",var1)

#program to demo access of var in inner & outer function
def outer_func():
  var=11
  def inner_func():
    var=22
    print("inner variable",var)
  inner_func()
  print("outer variable",var)
outer_func()

def cube(x):
  return (x*x*x)
num=10
result=cube(num)
print("cube of",num,"is",result)

#writing a program to understand a mismatch parameters
def fun(i):
  print("orange",i)
j=10
fun(j)

#program to demo key args
def display(str,int_x,float_y):
  print("the string is",str)
  print("the integer is",int_x)
  print("the float is",float_y)
display(float_y=5678.9998,str="hi",int_x=1234)

#lambda function has no names
#it can take n number of attributes
#it can only return 1 value
#lambda function cannot access global var
#cannot access var other than their parameter list
#cannot contain multi parameters
#doesnot have explicit return statements
addition=lambda x,y,z:x+y+z
print("sum=",addition(10,20,30))

def small(a,b):
  if(a<b):
    return a
  else:
    return b
add=lambda x,y:x+y
diff=lambda x,y:x-y
print("smaller of two numbers",small(-3,-2),"dffer=",diff(5,3),"sum=",add(5,3))

def incre(y):
  return (lambda x:x+1)(y)
a=100
print("a=",a)
print("a after incrementing")
b=incre(a)
print(b)

#program to pass a lambda fun as an func arg
def fun(f,n):
  print(f(n))
twice=lambda x:x*2
triple=lambda x:x*3
fun(twice,4)
fun(triple,3)

x=lambda: sum(range(1,11))
print(x())

def swap(a,b):
  temp=a
  a=b
  b=temp
  print("a and b after swapping",a,b)
x=10
y=20
print("a and b before swapping",x,y)
swap(x,y)

#write a program to calculate SI. Suppose the customer is a senior citizen he is offered 12% ROI, for all other customers, the ROI is 10%
p=int(input("Enter principle amount:"))
age=int(input("Enter age in years:"))
t=int(input("Enter time in years:"))
if(age>60):
  si=(p*12*t)/100
  print("Simple Interest:",si)
else:
  si=(p*10*t)/100
  print("Simple Interest:",si)

def fact(n):
  if(n==1 or n==0):
    return 1
  else:
    return n*fact(n-1)
n=int(input())
print(fact(n))

#program to find the exp(x,y) using recurssion function
def expo(x,y):
  if y==0:
    return 1
  else:
    return (x*expo(x,y-1))
a=int(input("Enter a number:"))
b=int(input("Enter exponent:"))
res=expo(a,b)
print(res)

#program to find fibbonacci series using recurssion function
def fibb(n):
  if(n<2):
    return 1
  return (fibb(n-1)+fibb(n-2))
n=int(input("Enter the Range:"))
for i in range(n):
  print("Fibbonacci(",i,")=",fibb(i))

#towers of hanoi---->no.of moves: (2^n)-1
def hanoi(n,l1,l2,l3):
  if n>0:
    hanoi(n-1,l1,l3,l2)
    if l1:
      l3.append(l1.pop())
    hanoi(n-1,l2,l1,l3)
list1=[1,2,3,4]
list2=[]
list3=[]
print(list1,list2,list3)
hanoi(len(list1),list1,list2,list3)
print(list1,list2,list3)

x=str(input("Enter the string with char:"))
y=str(input("Enter the string for match:"))
print("with wild characters : ",x)
print("without wild characters : ",y)
print(solve(x,y))

n=int(input())
l=[]
m=[]
g=[]
q=[]
for i in range(n):
  l.append(int(input()))
if(n<=0):
  print("Invalid Input")
else:
  for k in l:
    if(k%2==0):
      m.append(k)
    else:
      g.append(k)
q=m+g
print(q)

"""**LMS Problems**

**Taking n number of space separated inputs**
"""

n=int(input())
lst = [int(i) for i in input().split()][:n]
print(l)

s=input()
sum=0
for i in s:
  sum=sum+ord(i)#to get ascii value of character use ord()
print(sum)

x=int(input("Enter a number:"))
y=int(input("Enter a number:"))
p=int(input("Enter a number:"))
q=int(input("Enter a number:"))
count=0
for i in range(p,q+1):
  if((i%x==0) and (i%y==0)):
    count=count+1
print("Number of numbers divisible between",p,"and",q,"are:",count)

n=int(input("Enter size:"))
l=[]
p=1
for i in range(n):
  l.append(int(input()))
for i in l:
  p=p*i
print(p)

n=input()
l=n.split()
print(l)
p=1
for i in l:
  p=p*int(i)
print(p)

size=int(input("Enter size:"))
l=[]
for i in range(size):
  ele=input()
  l.append(ele)
print(l)
s=" ".join(l)
print(s)

n=int(input())
lst = [int(i) for i in input().split()][:n]
res=1
for i in lst:
  res=res*i
print(res)

a=0
b=1
while((a+b)<50):
  if((a+b)==1):
    print(1,end=" ")
  c=a+b
  print(c,end=" ")
  a=b
  b=c

a=0
b=1
while b<50:
  print(b,end=" ")
  a,b=b,a+b

n=int(input())
arr=[int(i) for i in input().split()][:n]
print(arr)
arr.sort()
print(arr)

#find the median value
n=int(input())
arr=[int(i) for i in input().split()][:n]
print(arr)
s=0
m=0
arr.sort()
print(arr)
if(n%2==0):
  s=arr[(n//2)-1]+arr[((n//2)+1)-1]
  m=s//2
  print(m)
else:
  m=arr[((n+1)//2)-1]
  print(m)

#find the median value
n=int(input())
arr=[int(i) for i in input().split()][:n]
print(arr)
s=0
m=0
arr.sort()
print(arr)
if(n%2==0):
  s=arr[(n//2)-1]+arr[((n//2)+1)-1]
  m=s//2
  print(m)
else:
  m=arr[((n+1)//2)-1]
  print(m)

s1=input()
s2=input()
if(sorted(s1)==sorted(s2)):
    print("YES")
else:
    print("NO")

"""**Object-Oriented-Programming**"""

#program to access a class member using a class object
class abc:
  var=22
  def display(self):
    print("this is class method")
obj=abc()
print(obj.var)
obj.display()

#program to illustrate the constructor
#__init__()....method
class abc:
  def __init__(self,val):
    print("in class method")
    self.val=val
    print("the value is :",val)
obj=abc(10)

#program to differentiate between class and object variable
class abc():
  class_var=0 #class variable
  def __init__(self,var):
    abc.class_var+=1
    self.var=var #object variable
    print("the obj var is:",var)
    print("the class value of c=var",abc.class_var)
obj1=abc(10)
obj2=abc(20)
obj3=abc(30)

#program illustrating a modification on numerics
class number:
  even=0 #default value
  def check(self,num):
    if(num%2==0):
      self.even=1
  def even_odd(self,num):
    self.check(num)
    if self.even==1:
      print(num,"is even number")
    else:
      print(num,"is odd number")
obj=number()
obj.even_odd(17)

class Number:
  even=[]
  odd=[]
  def __init__(self,num):
    self.num=num
    if(num%2==0):
      Number.even.append(num)
    else:
      Number.odd.append(num)
n1=Number(21)
n2=Number(32)
n3=Number(50)
n4=Number(85)
n5=Number(98)
print("Odd List=",Number.odd)
print("Even List=",Number.even)

#delete method ---- C++/JAVA analogues to destructors
#general syntax __del__
class abc():
  class_var=0
  def __init__(self,var):
    abc.class_var+=1
    self.var=var
    print("the obj var value is ",var)
    print("the class var value is ",abc.class_var)
  def __del__(self):
    abc.class_var-=1
    print("object with %d value is going out of scope",(self.var))
obj=abc(10)
obj1=abc(11)
obj2=abc(12)
del obj
del obj1
del obj2

'''__repr__------->syntax report of the object
__cmp__------>compares two class objects
__len__------->len(object)
__call__------->it acts like a function to call its instances
__lt__,__le__,__eq__,__ne__,__gt__,__ge__,__
__iter__------>iteration over an object
__getitem__----->used for indexing
gs: def __getitem__(self,var/key):
8 set item assign an item to the indexed value'''

#program to demonstrate get and set items in a list
class numbers:
  def __init__(self,mylist):
    self.mylist=mylist
  def __getitem__(self,index):
    return self.mylist[index]
  def __setitem__(self,index,val):
    self.mylist[index]=val
numlist=numbers([1,2,3,4,5,6,7,8,9])
print(numlist[3])
print(numlist.mylist)
numlist[3]=10
print(numlist.mylist)
print(numlist[3])

class ABC():
  def __init__(self,name,var):
    self.name=name
    self.var=var
  def __repr__(self):
    return repr(self,var)
  def __len__(self):
    return len(self,name)
  def __cmp__(self):
    return self.var-obj.var
obj=ABC("abcdef",10)
print("the value stored in obj is ",repr(obj))
print("the length of the name stored in obj",len(obj))
obj1=ABC("ghijkl",1)
val=obj.__cmp__(obj1)
if val==0:
  print("both values are equal")
elif val==-1:
  print("1st value is less than 2nd")
else:
  print("2nd value is less than 1st")

#program for illustrating use of private method
class abc():
  def __init__(self,var):
    self.__var=var
  def __display(self):
    print("this from class method,var= ",self.__var)
obj=abc(10)
obj._abc__display()

# to call a class method from another method of same class
class abc():
  def __init__(self,var):
    self.var=var
  def display(self):
    print("var is =",self.var)
  def add_2(self):
    self.var+=2
    self.display()
obj=abc(10)
obj.add_2()

#program to show how a class method calls a function which defined in a global name space
def scale_10(x):
  return x*10
class abc():
  def __init__(self,var):
    self.var=var
  def display(self):
    print("var is =",self.var)
  def modify(self):
    self.var=scale_10(self.var)
obj=abc(10)
obj.display()
obj.modify()
obj.display()

#built-in attributes
#for get set and delete
'''1. hasattr(obj,name)=checks obj possessess the attributes values or not
2. getattr(obj,name,default)
3. setattr(obj,name,value) - which is used to set an attribute of an object
4. delattr(obj,name)'''

#built-in class attributes
class abc():
  def __init__(self,var1,var2):
    self.var1=var1
    self.var2=var2
  def display(self):
    print("var1 is =",self.var1)
    print("var2 is =",self.var2)
obj=abc(10,12.34)
obj.display()
print("object.__dict__-",obj.__dict__)
print("object.__doc__-",obj.__doc__)
print("object.__name__-",abc.__name__)
print("object.__module__-",obj.__module__)
print("object.__bases__-",abc.__bases__)

import gc
print("garbage collection threshold",gc.get_threshold())

#program that has abstract class to drive 2 classes
#rectangle and triangle from polygon class and 
#write the methods to get their details and dimensions
#and hence calculate the area respectively
class polygon:
  def get_data(self):
    raise NotImplementedError()
  def area(self):
    raise NotImplementedError()
class rectangle(polygon):
  def get_data(self):
    self.length=float(input("Enter Rectangle Length:"))
    self.breadth=float(input("Enter Rectangle Breadth:"))
  def area(self):
    return self.length*self.breadth
class triangle(polygon):
  def get_data(self):
    self.base=float(input("Enter Triangle Base:"))
    self.height=float(input("Enter Tiangle Height:"))
  def area(self):
    return 0.5*self.base*self.height
R=rectangle()
R.get_data()
print("Area of Rectangle is",R.area())
T=triangle()
T.get_data()
print("Area of Triangle is:",T.area())

#encapsulation public members
class pub:
  def __init__(self,name,num):
    self.name=name
    self.num=num
  def Num(self):
    print(self.name,"Roll Number is:",self.num)
obj=pub("harry",2005)
obj.Num()

#program to overload the __call__method
class multi:
  def __init__(self,num):
    self.num=num
  def __call__(self,O):
    return self.num*O
x=multi(10)
print(x(5))

#SPECIAL OR MISCELLANIOUS FUNCTIONS IN OVERLOADING
class number:
  def __init__(self,num):
    self.num=num
  def display(self):
    return self.num
  def __abs__(self):
    return abs(self.num)
  def __float__(self):
    return float(self.num)
  def __hex__(self):
    return hex(self.num)
  def __oct__(self):
    return oct(self.num)
  def __setitem__(self,num):
    self.num=num
n=number(-14)
print("n is :",n.display())
print("abs(n) is :",abs(n))
n=abs(n)
print("converting to float:",float(n))
print("converting to hexa:",hex(n))
print("converting to octa:",oct(n))

s=int(input())
wave=input()
c=0
max=0
flag=0
arr=list(wave)
for i in range(0,s):
  if(arr[i]=='1'):
    c=c+1
    flag=1
  elif(arr[i]=='0' and flag==1):
    c=0
    flag=0
  if(c>max):
    max=c
print(max)



"""**Data Structures**"""

class bt:
  def __init__(self,data):
    self.data=data
    self.lc=None
    self.rc=None
def insert(root,newvalue):
  if(root is None):
    root=bt(newvalue)
    return root
  if(newvalue<root.data):
    root.lc=insert(root.lc,newvalue)
  else:
    root.rc=insert(root.rc,newvalue)
  return root
def inorder(root):
  if root==None:
    return
  inorder(root.lc)
  print(root.data)
  inorder(root.rc)
root=insert(None,15)
insert(root,10)
insert(root,24)
insert(root,5)
insert(root,14)
insert(root,22)
insert(root,55)
print("Inorder Traversal:")
inorder(root)

num=int(input())
lst = [int(i) for i in input().split()][:num]
b=[]
c=[]
for j in lst:
  if(j%2==0):
      b.append(j)
  else:
      c.append(j)
b.append(c)
print(b)

num=int(input())
lst = [int(i) for i in input().split()][:num]
b=[]
c=[]
for j in lst:
  if(j%2==0):
      b.append(j)
  else:
      c.append(j)
b.extend(c)
print(b)
for j in b:
  print(j,end=" ")

keys=['NAME','AGE','BRANCH']
values=["ABC",'100','AERONAUTICAL']
dit={}
for i in keys:
  for j in values:
    dit[i]=j
    values.remove(j)
    break
print(dit)

keys=['NAME','AGE','BRANCH']
values=["ABC",'100','AERONAUTICAL']
dit=dict(zip(keys,values))
print(dit)

#write a program to store a sparse matrix into a dictionary
ar=[[0,0,0,1,0],   #sparse matrix=>(no. of zero elements)> (no. of non-zero elements)
    [2,0,0,0,3],
    [0,0,0,4,0]]
dic={}
print(len(ar))
# iterating through the matrix
for i in range(len(ar)):
    for j in range(len(ar[i])):
        if ar[i][j] != 0:
            # adding non zero elements to the dictionary
            dic[i,j] = ar[i][j]
 
print("Position of non-zero elements in the matrix:")
print(dic)

#write a program to print non-repeated character in a string
s='LEVEL'
for i in s:
  c=0
  for j in s:
    if i==j:
      c=c+1
    if c>1:
      break
  if c==1:
    print("The non repeated character in string is:",i)

"""**Linked LIst**"""

#Basic
class linklist:
  def __init__(self,data=None):
    self.data=data
    self.next=None
    print(self.data)
node1=linklist("ONE")
node2=linklist("TWO")
node3=linklist("THREE")
node1.next=node2
node2.next=node3

class Node:
  def __init__(self,num):
    self.num=num
    self.next=None
class slist:
  def __init__(self):
    self.head=None
  def push(self,newnode):
    newnode=Node(newnode)
    newnode.next=self.head
    self.head=newnode
  def insertnext(self,prenode,nextnode):
    if prenode is None:
      print("the previous node is:")
      return
    newnode=Node(newnode)
    newnode.next=prenode.next
    prenode.next=newnode
  def append(self,newnode):
    newnode=Node(newnode)

"""**NEW**"""

a=int(input())
b=int(input())
c=int(input())
if(a>b and a>c):
  print("a is greatest")
elif(b>a and b>c):
  print("b is greatest")
else:
  print("c is greatest")

n=int(input("Enter number of rows:"))
i=1
while(i<=n):
  j=1 
  while(j<=i):
    print(j,end=" ")
    j=j+1
  print("\n")
  i=i+1

n=int(input("Enter number of rows:"))
i=1
while(i<=n):
  j=1 
  while(j<=i):
    print('*',end=" ")
    j=j+1
  print("\n")
  i=i+1

#Factorial of number
n=int(input("Enter a number you want to find factorial:"))
i=1
res=1
if(n==0):
  print(1)
while(i<=n):
  res=res*i
  i=i+1
print(res)

#Fibonacci Series
n=int(input("Enter number of terms to be printed:"))
a=0
b=1
c=0
i=1
print(a,end=" ")
print(b,end=" ")
if(n<0):
  print("Invalid Input")
else:
  while(i<=(n-2)):
    c=a+b
    print(c,end=" ")
    a=b
    b=c
    i=i+1

#Prime or not
n=int(input("Enter a number to check it is prime or not:"))
c=0
for i in range(1,n+1):
  if (n%i==0):
    c=c+1
if(c==2):
  print(n," is prime")
else:
  print(n," is not prime")

#Average of list elements
num=int(input())
lst=[int(i) for i in input().split()][:num]
s=0
for x in range(0,num):
  s=s+lst[x]
print("The Average of List elements is",(s//num))

#Removing 0th,4th,5th elements from the list
lst=['red','green','white','black','pink','yellow']
print(lst)
if(len(lst)>=5):
  lst.remove(lst[0])
  lst.remove(lst[2])
  lst.remove(lst[2])
  print(lst)
else:
  print("Take a list of size greater than 5")

#Product of tuple elements
t=(1,2,3,5,4)
p=1
for i in t:
  p=p*i
print(p)

#removing empty tuples from a list of tuples
l=[(5,6),(2),(),tuple(),(),(1,2,3)]
print(type(l[1]))
c=0
for i in range(0,len(l)):
  if l[i]==tuple():
    c=c+1
print(c)
for j in range(0,c):
  l.remove(tuple())
print(l)

#counting repeated characters in a string
#reverse a string if its length is mutiple of 4
s=input("Enter the string:")
l=len(s)
if(l%4==0):
  print(s[::-1])
else:
  print(s)

#To separate even,odd and zero from list
l=[10,25,0,6,0,9,55,26,46]
e=[]
o=[]
q=[]
for i in l:
  if(i==0):
    q.append(i)
  elif(i%2==0):
    e.append(i)
  else:
    o.append(i)
print(q)
print(e)
print(o)

#given a dictionary of lists into a list of dictionaries

"""**Object Oriented Programming**"""

#private variables need to be started with double underscore 
#Ex:->__rollnumber
#Private variables cannot be accessed with class object
#Private variables can be accessed by only get methods inside a class
class Student:
  name="Random Name"
  __roll=100
  def get__roll(self):
    return self.__roll
  def set__roll(self,new):
    self.__roll=new
obj=Student()
print(obj.name)
print(obj.get__roll())
obj.set__roll(2022)
print(obj.get__roll())

dic={}
n=int(input())
for i in range(n):
  username=input()
  password=input()
  dic[username]=password
print(dic)

arr=[]
n=int(input())
found=False

for i in range(n):
  username=input("Username:")
  password=input("Password:")
  arr.append({username:password})
print(arr)
u=input("Username:")
p=input("Password:")
for i in arr:
  try:
    password=i[u]
    found=True
    if p==password:
      print("Valid Password")
    else:
      print("Invalid Password")
  except:
    pass
if found==False:
  print("User Not Found")

"""**Stack**"""

stack=[]
stack.append(1)
stack.append(2)
stack.append(3)
stack.append(4)
stack.append(5)
print(stack)
stack.pop()# pop without index deletes last element
print(stack)

"""**Queues**"""

queue=[]
queue.append(1)
queue.append(2)
queue.append(3)
queue.append(4)
queue.append(5)
print(queue)
queue.pop(0)# pop with index deletes that element
print(queue)
queue.append(6)
print(queue)

